Паттерн "Filter" (также известный как "Pipeline" или "Chain of Responsibility") позволяет обрабатывать
данные последовательно через цепочку обработчиков. Каждый обработчик может изменять данные или выполнять
определенные действия. В Go этот паттерн можно реализовать с помощью интерфейсов и структур.

Этот пример демонстрирует, как можно создать цепочку фильтров и последовательно применять их к данным:
1. Интерфейс Filter: Определяет метод Apply, который применяет фильтр к данным.
2. BaseFilter: Базовая структура для всех фильтров, которая хранит ссылку на следующий фильтр в цепочке и реализует метод Apply, передающий данные следующему фильтру.
3. ToUpperFilter: Фильтр, преобразующий строку в верхний регистр.
4. TrimSpacesFilter: Фильтр, удаляющий пробелы из строки.
5. AddPrefixFilter: Фильтр, добавляющий префикс к строке.
6. main: Создает фильтры, устанавливает цепочку и применяет ее к входным данным.
